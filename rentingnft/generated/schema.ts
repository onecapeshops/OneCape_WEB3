// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class RentBook extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RentBook entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type RentBook must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("RentBook", id.toString(), this);
    }
  }

  static load(id: string): RentBook | null {
    return changetype<RentBook | null>(store.get("RentBook", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get rentAssetID(): BigInt | null {
    let value = this.get("rentAssetID");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set rentAssetID(value: BigInt | null) {
    if (!value) {
      this.unset("rentAssetID");
    } else {
      this.set("rentAssetID", Value.fromBigInt(<BigInt>value));
    }
  }

  get tokenID(): BigInt | null {
    let value = this.get("tokenID");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set tokenID(value: BigInt | null) {
    if (!value) {
      this.unset("tokenID");
    } else {
      this.set("tokenID", Value.fromBigInt(<BigInt>value));
    }
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get rentedTo(): string | null {
    let value = this.get("rentedTo");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set rentedTo(value: string | null) {
    if (!value) {
      this.unset("rentedTo");
    } else {
      this.set("rentedTo", Value.fromString(<string>value));
    }
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get createdTimestamp(): BigInt | null {
    let value = this.get("createdTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set createdTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("createdTimestamp");
    } else {
      this.set("createdTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get deadline(): BigInt | null {
    let value = this.get("deadline");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set deadline(value: BigInt | null) {
    if (!value) {
      this.unset("deadline");
    } else {
      this.set("deadline", Value.fromBigInt(<BigInt>value));
    }
  }

  get noOfDays(): BigInt | null {
    let value = this.get("noOfDays");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set noOfDays(value: BigInt | null) {
    if (!value) {
      this.unset("noOfDays");
    } else {
      this.set("noOfDays", Value.fromBigInt(<BigInt>value));
    }
  }

  get isClosed(): boolean {
    let value = this.get("isClosed");
    return value!.toBoolean();
  }

  set isClosed(value: boolean) {
    this.set("isClosed", Value.fromBoolean(value));
  }

  get isRentPayed(): boolean {
    let value = this.get("isRentPayed");
    return value!.toBoolean();
  }

  set isRentPayed(value: boolean) {
    this.set("isRentPayed", Value.fromBoolean(value));
  }
}
