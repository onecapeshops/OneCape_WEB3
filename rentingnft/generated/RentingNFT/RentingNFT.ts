// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class RentNFTEvent extends ethereum.Event {
  get params(): RentNFTEvent__Params {
    return new RentNFTEvent__Params(this);
  }
}

export class RentNFTEvent__Params {
  _event: RentNFTEvent;

  constructor(event: RentNFTEvent) {
    this._event = event;
  }

  get rentAssetID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get tokenID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get owner(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get createdTimestamp(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get noOfDays(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class getNFTAsRentEvent extends ethereum.Event {
  get params(): getNFTAsRentEvent__Params {
    return new getNFTAsRentEvent__Params(this);
  }
}

export class getNFTAsRentEvent__Params {
  _event: getNFTAsRentEvent;

  constructor(event: getNFTAsRentEvent) {
    this._event = event;
  }

  get tokenID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get rentAssetID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get rentedTo(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get currentTimeStamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get deadlineDate(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class withdrawRentedNFTEvent extends ethereum.Event {
  get params(): withdrawRentedNFTEvent__Params {
    return new withdrawRentedNFTEvent__Params(this);
  }
}

export class withdrawRentedNFTEvent__Params {
  _event: withdrawRentedNFTEvent;

  constructor(event: withdrawRentedNFTEvent) {
    this._event = event;
  }

  get tokenID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get rentAssetID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get createdTimestamp(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class RentingNFT__rentedNFTsListResult {
  value0: BigInt;
  value1: BigInt;
  value2: Address;
  value3: Address;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;
  value8: boolean;
  value9: boolean;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: Address,
    value3: Address,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt,
    value8: boolean,
    value9: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromBoolean(this.value8));
    map.set("value9", ethereum.Value.fromBoolean(this.value9));
    return map;
  }

  getRentAssetID(): BigInt {
    return this.value0;
  }

  getId(): BigInt {
    return this.value1;
  }

  getOwner(): Address {
    return this.value2;
  }

  getRentedTo(): Address {
    return this.value3;
  }

  getAmount(): BigInt {
    return this.value4;
  }

  getCreatedTimestamp(): BigInt {
    return this.value5;
  }

  getDeadline(): BigInt {
    return this.value6;
  }

  getNoOfDays(): BigInt {
    return this.value7;
  }

  getIsClosed(): boolean {
    return this.value8;
  }

  getIsRentPayed(): boolean {
    return this.value9;
  }
}

export class RentingNFT extends ethereum.SmartContract {
  static bind(address: Address): RentingNFT {
    return new RentingNFT("RentingNFT", address);
  }

  OneCapeERC20TokenContract(): Address {
    let result = super.call(
      "OneCapeERC20TokenContract",
      "OneCapeERC20TokenContract():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_OneCapeERC20TokenContract(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "OneCapeERC20TokenContract",
      "OneCapeERC20TokenContract():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  RentalNFTTokenContract(): Address {
    let result = super.call(
      "RentalNFTTokenContract",
      "RentalNFTTokenContract():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_RentalNFTTokenContract(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "RentalNFTTokenContract",
      "RentalNFTTokenContract():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _openRentedNFTsList(param0: BigInt): BigInt {
    let result = super.call(
      "_openRentedNFTsList",
      "_openRentedNFTsList(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try__openRentedNFTsList(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_openRentedNFTsList",
      "_openRentedNFTsList(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getOpenRentedNFTsListings(): Array<BigInt> {
    let result = super.call(
      "getOpenRentedNFTsListings",
      "getOpenRentedNFTsListings():(uint256[])",
      []
    );

    return result[0].toBigIntArray();
  }

  try_getOpenRentedNFTsListings(): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getOpenRentedNFTsListings",
      "getOpenRentedNFTsListings():(uint256[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  onERC1155BatchReceived(
    param0: Address,
    param1: Address,
    param2: Array<BigInt>,
    param3: Array<BigInt>,
    param4: Bytes
  ): Bytes {
    let result = super.call(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigIntArray(param2),
        ethereum.Value.fromUnsignedBigIntArray(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC1155BatchReceived(
    param0: Address,
    param1: Address,
    param2: Array<BigInt>,
    param3: Array<BigInt>,
    param4: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigIntArray(param2),
        ethereum.Value.fromUnsignedBigIntArray(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  onERC1155Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: BigInt,
    param4: Bytes
  ): Bytes {
    let result = super.call(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC1155Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: BigInt,
    param4: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  rentNFTNonce(): BigInt {
    let result = super.call("rentNFTNonce", "rentNFTNonce():(uint256)", []);

    return result[0].toBigInt();
  }

  try_rentNFTNonce(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("rentNFTNonce", "rentNFTNonce():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rentedNFTsList(param0: BigInt): RentingNFT__rentedNFTsListResult {
    let result = super.call(
      "rentedNFTsList",
      "rentedNFTsList(uint256):(uint256,uint256,address,address,uint256,uint256,uint256,uint256,bool,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new RentingNFT__rentedNFTsListResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toAddress(),
      result[3].toAddress(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toBoolean(),
      result[9].toBoolean()
    );
  }

  try_rentedNFTsList(
    param0: BigInt
  ): ethereum.CallResult<RentingNFT__rentedNFTsListResult> {
    let result = super.tryCall(
      "rentedNFTsList",
      "rentedNFTsList(uint256):(uint256,uint256,address,address,uint256,uint256,uint256,uint256,bool,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new RentingNFT__rentedNFTsListResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toAddress(),
        value[3].toAddress(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toBoolean(),
        value[9].toBoolean()
      )
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _capeToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _rentalNFTContract(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class RentAssetCall extends ethereum.Call {
  get inputs(): RentAssetCall__Inputs {
    return new RentAssetCall__Inputs(this);
  }

  get outputs(): RentAssetCall__Outputs {
    return new RentAssetCall__Outputs(this);
  }
}

export class RentAssetCall__Inputs {
  _call: RentAssetCall;

  constructor(call: RentAssetCall) {
    this._call = call;
  }

  get _tokenid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _noOfDays(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class RentAssetCall__Outputs {
  _call: RentAssetCall;

  constructor(call: RentAssetCall) {
    this._call = call;
  }
}

export class WithdrawRentedAssetCall extends ethereum.Call {
  get inputs(): WithdrawRentedAssetCall__Inputs {
    return new WithdrawRentedAssetCall__Inputs(this);
  }

  get outputs(): WithdrawRentedAssetCall__Outputs {
    return new WithdrawRentedAssetCall__Outputs(this);
  }
}

export class WithdrawRentedAssetCall__Inputs {
  _call: WithdrawRentedAssetCall;

  constructor(call: WithdrawRentedAssetCall) {
    this._call = call;
  }

  get _tokenid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _rentedNFTId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawRentedAssetCall__Outputs {
  _call: WithdrawRentedAssetCall;

  constructor(call: WithdrawRentedAssetCall) {
    this._call = call;
  }
}

export class GetNFTAsRentCall extends ethereum.Call {
  get inputs(): GetNFTAsRentCall__Inputs {
    return new GetNFTAsRentCall__Inputs(this);
  }

  get outputs(): GetNFTAsRentCall__Outputs {
    return new GetNFTAsRentCall__Outputs(this);
  }
}

export class GetNFTAsRentCall__Inputs {
  _call: GetNFTAsRentCall;

  constructor(call: GetNFTAsRentCall) {
    this._call = call;
  }

  get _tokenid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _rentedNFTId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class GetNFTAsRentCall__Outputs {
  _call: GetNFTAsRentCall;

  constructor(call: GetNFTAsRentCall) {
    this._call = call;
  }
}

export class OnERC1155BatchReceivedCall extends ethereum.Call {
  get inputs(): OnERC1155BatchReceivedCall__Inputs {
    return new OnERC1155BatchReceivedCall__Inputs(this);
  }

  get outputs(): OnERC1155BatchReceivedCall__Outputs {
    return new OnERC1155BatchReceivedCall__Outputs(this);
  }
}

export class OnERC1155BatchReceivedCall__Inputs {
  _call: OnERC1155BatchReceivedCall;

  constructor(call: OnERC1155BatchReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get value3(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class OnERC1155BatchReceivedCall__Outputs {
  _call: OnERC1155BatchReceivedCall;

  constructor(call: OnERC1155BatchReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class OnERC1155ReceivedCall extends ethereum.Call {
  get inputs(): OnERC1155ReceivedCall__Inputs {
    return new OnERC1155ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC1155ReceivedCall__Outputs {
    return new OnERC1155ReceivedCall__Outputs(this);
  }
}

export class OnERC1155ReceivedCall__Inputs {
  _call: OnERC1155ReceivedCall;

  constructor(call: OnERC1155ReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class OnERC1155ReceivedCall__Outputs {
  _call: OnERC1155ReceivedCall;

  constructor(call: OnERC1155ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class OnERC721ReceivedCall extends ethereum.Call {
  get inputs(): OnERC721ReceivedCall__Inputs {
    return new OnERC721ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC721ReceivedCall__Outputs {
    return new OnERC721ReceivedCall__Outputs(this);
  }
}

export class OnERC721ReceivedCall__Inputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class OnERC721ReceivedCall__Outputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class SetERC20TokenContractCall extends ethereum.Call {
  get inputs(): SetERC20TokenContractCall__Inputs {
    return new SetERC20TokenContractCall__Inputs(this);
  }

  get outputs(): SetERC20TokenContractCall__Outputs {
    return new SetERC20TokenContractCall__Outputs(this);
  }
}

export class SetERC20TokenContractCall__Inputs {
  _call: SetERC20TokenContractCall;

  constructor(call: SetERC20TokenContractCall) {
    this._call = call;
  }

  get _address(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetERC20TokenContractCall__Outputs {
  _call: SetERC20TokenContractCall;

  constructor(call: SetERC20TokenContractCall) {
    this._call = call;
  }
}

export class SetRentalNFTTokenContractCall extends ethereum.Call {
  get inputs(): SetRentalNFTTokenContractCall__Inputs {
    return new SetRentalNFTTokenContractCall__Inputs(this);
  }

  get outputs(): SetRentalNFTTokenContractCall__Outputs {
    return new SetRentalNFTTokenContractCall__Outputs(this);
  }
}

export class SetRentalNFTTokenContractCall__Inputs {
  _call: SetRentalNFTTokenContractCall;

  constructor(call: SetRentalNFTTokenContractCall) {
    this._call = call;
  }

  get _address(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetRentalNFTTokenContractCall__Outputs {
  _call: SetRentalNFTTokenContractCall;

  constructor(call: SetRentalNFTTokenContractCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
